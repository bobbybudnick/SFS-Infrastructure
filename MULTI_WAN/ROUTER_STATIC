#!/bin/bash

#for sfs business static ip
#particularly for zte mf861
#cellular secondary wan connection with static
#connected directly to the internet - beware

#DEPENDENCIES: dnsmasq/iftop/iptables/vnstat

#currently meant to be run with sudo from a console login
#in other words not meant for auto start or running as regular user

#turn off predicatable device names in grub
#net.ifnames=0 biosdevname=0

#determine WAN port
WAN=ppp0
WAN_CHECK_1=$(sudo ifconfig -a | grep wwan0 | wc -l)
if [ $WAN_CHECK_1 -gt 0 ]
then
WAN=wwan0
fi
WAN_CHECK_2=$(sudo ifconfig -a | grep usb0 | wc -l)
if [ $WAN_CHECK_2 -gt 0 ]
then
WAN=usb0
fi
#this gives errors on a console only setup
#if ! kdialog --title "Router" --warningcontinuecancel "Press continue to run the router app"
#if ! zenity --question --text "Press Continue to run the router app"
#then
#exit
#fi

echo "Starting Router"
sleep 2

#suppress pi voltage warning messages
sudo dmesg -n 1

#clean up
#the internal ethernet is broken on this pi so a usb ethernet is used at eth1 instead
sudo ifconfig eth0 down
sudo iptables -F
sudo iptables -F -t nat
sudo killall ROUTER_STATIC_WORKER
sudo route del default
sudo route del default
sudo route del default

#setup bridge
#this may be necessary to access the administration page at 192.168.1.1
#if the dmz address ever changes it will be necessary to see what it is here
#the router could be headless or console only in this case so lets clients configure
#routing may need to be deconfigured and just this used until configured properly
#probably do not want to use permanently because seems to create all sorts of problems
#sudo brctl addbr br0
#sudo brctl addif br0 usb0 eth0
#sudo brctl addif br0 usb0 eth1
#sudo ifconfig br0 up
#sudo ifconfig br0 192.168.1.109

#start cellular connection
sudo ifconfig eth1 up
sudo ifconfig $WAN up
sudo ifconfig eth1 192.168.1.19
sudo ifconfig $WAN 192.168.1.109
#this is adding the default gateway out of eth1 which we do not want
#sudo route add default gw 192.168.1.1
sudo route add default gw 192.168.1.1 dev $WAN
#sudo dhclient usb0
#sudo ifconfig $WAN 192.168.1.2
#sudo ifconfig $WAN 192.168.1.163
#sudo route add default gw 192.168.1.1
#sudo sh -c "echo -e 'nameserver 209.18.47.61\nnameserver 209.18.47.62' > /etc/resolv.conf"
#sudo sh -c "echo 'nameserver 208.67.222.222\nnameserver 208.67.220.220' > /etc/resolv.conf"

#pass traffic from subnet to subnet
sudo sh -c "echo '1' >> /proc/sys/net/ipv4/ip_forward"

#do not block any traffic to or from the lan or cellular device specifically
#allows for the forwarding above to work properly
#sudo iptables -A FORWARD -i eth0 -j ACCEPT
#sudo iptables -A FORWARD -o eth0 -j ACCEPT
#sudo iptables -A FORWARD -i br0 -j ACCEPT
#sudo iptables -A FORWARD -o br0 -j ACCEPT
sudo iptables -A FORWARD -i usb0 -j ACCEPT
sudo iptables -A FORWARD -o usb0 -j ACCEPT
sudo iptables -A FORWARD -i eth1 -j ACCEPT
sudo iptables -A FORWARD -o eth1 -j ACCEPT

#all traffic is translated going out of ppp0
#few tutorials mention this one
#not needed for this because the cellular device does most of the nat
#gone back and forth about whether this is necessary but it turns out it is
#may not be necessary for servers but is necessary for clients
sudo iptables -t nat -A POSTROUTING -o $WAN -j MASQUERADE
#try this too for newer systems just in case
#sudo iptables-legacy -t nat -A POSTROUTING -o $WAN -j MASQUERADE

#secure ssh connections from outside
#hopefully this only needs to be ran once per script execution
#initial rule setup???
sudo iptables -I INPUT -p tcp --dport 1001 -m state --state NEW -m recent --set
#no more than 3 connections over a one day period - good luck with that
sudo iptables -I INPUT -p tcp --dport 1001 -i $WAN -m state --state NEW -m recent --update --seconds 86400 --hitcount 3 -j DROP
#put the bad people in the kernel log for later processing
#would this not log our legitimate attempts from outside???
#to what extent does this actually log???
#sudo iptables -I INPUT -p tcp --dport 1001 -i $WAN -j LOG
#maybe this does what we want
sudo iptables -I INPUT -p tcp --dport 1001 -i $WAN -m state --state NEW -m recent --update --seconds 86400 --hitcount 3 -j LOG

#startup the worker script
#the worker uses a loop for handling server port forward toggling
#in contrast the helper is a tmux assistance script
/home/pi/ROUTER_STATIC_WORKER&

#this is how to launch a script in an automated way with tmux
tmux new-session -d -s "TESTSESSION" /home/pi/ROUTER_STATIC_HELPER

sleep 5
#now connect to the detached session - seems to work like screen
tmux attach-session

#sleep 5
#while true
#do
#echo "REPEAT"
#determine total data for the month
#TOTAL_DATA=$(vnstat --oneline b -i $WAN | cut -d';' -f15)
#this is division
#TOTAL_DATA_CONVERT=$(echo $(($TOTAL_DATA / 1024000)))
#this kind of works but some iftop screen elements permanently disappear
#clear
#echo " Monthly Data: $TOTAL_DATA_CONVERT MB"
#shut this party down because we are not paying any more for this connection
#if [ $TOTAL_DATA_CONVERT -gt 500 ]
#then
#break
#fi
#sleep 60
#done

echo "Shutting Down Router"
#sudo ifconfig br0 down
#sudo brctrl delbr br0
sudo ifconfig $WAN 0.0.0.0
sudo ifconfig $WAN down

